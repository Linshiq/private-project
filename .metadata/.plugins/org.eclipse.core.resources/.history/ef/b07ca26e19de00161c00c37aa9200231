package com.lsq.medium;

import java.util.Arrays;
import java.util.Iterator;

/** 
* @author  Linshiq: 
* @date 创建时间：2017年1月18日 上午10:02:34 
* @version 1.0 
* @parameter  
* @since  
* @return  
*/
/**
 * <p>
 * 文件功能说明：
 *    有一些原木，现在想把这些木头切割成一些长度相同的小段木头，需要得到的小段的数目至少为 k。当然，我们希望得到的小段越长越好，你需要计算能够得到的小段木头的最大长度。
 *    
 *    注意事项
 *    	木头长度的单位是厘米。原木的长度都是正整数，我们要求切割得到的小段木头的长度也要求是整数。无法切出要求至少 k 段的,则返回 0 即可。
 *    
 *    样例
 *    	有3根木头[232, 124, 456], k=7, 最大长度为114.			
 * </p>
 * 
 * @Author linshiqin
 *         <p>
 *         <li>2017年1月18日-上午10:02:34</li>
 *         <li>修改记录</li>
 *         <li>-----------------------------------------------------------</li>
 *         <li>标记：修订内容</li>
 *         <li>linshiqin：创建注释模板</li>
 *         <li>-----------------------------------------------------------</li>
 *         </p>
 */
public class WoodCut {
	
	/** 
     *@param L: Given n pieces of wood with length L[i]
     *@param k: An integer
     *return: The maximum length of the small pieces.
     */
    public int woodCut(int[] L, int k) {
        // write your code here
    	
    	if(L.length == 0)
    		return 0;
    	
    	int maximum = 0;
    	
    	int sum = 0;
    	
    	Arrays.sort(L);
    	
    	for (int i = L[0]; i > 0; i--) {
			
    		maximum++;
    		
    		
		}
    	
    	return maximum;
    }
    
    private static int getCutNum(int cutLen,int[] L){
    	
    	int num = 0;
    	
    	for(int i=1;i<L.length;i++){
    		
    		num = num + L[i]/cutLen;
    	}
    	
    	return num;
    }
}
